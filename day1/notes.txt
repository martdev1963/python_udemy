Slow, Steady and Consistent, get you there... $Python Programmer Career$

Traceback (most recent call last):
  File "C:\Users\Martin\PycharmProjects\100 Days of Code - The Complete Python Pro Bootcamp\Day 2\Data Types\task.py", line 15, in <module>
    print(int("acd") + int("456")) # addition
ValueError: invalid literal for int() with base 10: 'acd'

conversion functions:
str()
float()
int()
bool()

TypeError
These errors occur when you are using the wrong data type. e.g. len(12345)

Because you can only give the len() function Strings, it will refuse to work and give you a TypeError if you give it a number (Integer).

PAUSE 1. Fix the len() function so it has no more warnings or errors.
Type Checking
You can check the data type of any value or variable in python using the type() function.

print(type("abc")) #will give you <class 'str'>

PAUSE 2. Write out 4 type checks to print all 4 data types
Using the type() and print() functions to print out 4 lines into the output area so we get the full collection of data types that we learnt about. <class 'str'> <class 'int'> <class 'float'> and <class 'bool'>

Type Conversion
You can convert data into different data types using special functions. e.g.

float()

int()

str()

[DAY 2] Type error checking and conversion:
PAUSE 3 challenge:
Make this line of code run without errors:
print("Number of letters in your name: " + str(len(input("Enter your name"))))

CHATGPT:
The issue is that len(input("Enter your name")) returns an integer, 
but the + operator expects strings on both sides when used for concatenation. 
To fix it, you need to convert the integer to a string using str():

SOLUTION:
print("Number of letters in your name: " + str(len(input("Enter your name"))))

Traceback (most recent call last):
  File "C:\Users\Martin\PycharmProjects\100 Days of Code - The Complete Python Pro Bootcamp\Day 2\Type Error, Checking and Conversion\task.py", line 4, in <module>
    print("Number of letters in your name: " + len(input("Enter your name")))
TypeError: can only concatenate str (not "int") to str

Mathematical Operations:
print(type(7 / 3))# division always produces a float...
# this is known as implicit type casting...

# math operators
print(123 + 567)
print(9 - 4)
print(3 * 5)
print(7 / 3)
print(type(7 / 3))# division always produces a float...
# this is known as implicit type casting...
# this example produces an integer:
print(7 // 3)
print(type(7 // 3))

# exponent (raise to the power of)
print(5**2)

# Order of Operations:
# PEMDASLR
#(), **, *, /, +, -
# the calculation that is more to the left is prioritized
# between * and /
# + OR -

print(3 * 3 + 3 / 3 - 3) # 7.0

"""
Make equation below == 3.0
print(3 * 3 + 3 / 3 - 3)
SOLUTION:
print(3 * (3 + 3) / 3 - 3)

Let's break it down:

    Inside the parentheses: 3+3=6 [3+3 = 6]
    Multiplication: 3×6=18  [3 * (3+3) = 18]
    Division: 18/3=6 [18/3]
    Subtraction: 6−3=3

This way, the expression evaluates to 3 without 
changing any of the numbers.
"""
https://chatgpt.com/c/67daeae3-de14-8009-a995-a9272a727c59


DAY 3:
Condition Check
Learn to use conditionals in Python to check a conditions and tell the computer what to do in each case. e.g.

if <this condition is true>:

    <then execute this line of code>

What if the condition is false?
The else keyword is used to define a block of code that will execute if the condition checked in the if statement is false.

if pigs can fly:

    <Some code that will never execute>

else:

    print("This is real life")

Python Indentation
Understand the importance of indentation in Python as a way to make certain lines of code subsidaries of other lines of code.

e.g.

if 5 > 2: #This is a parent line of code

    print("yes") #this is a child line of code

Comparator Operators
> Greater than
< Less than
>= Greater than or equal to
<= Less than or equal to
== Equal to
!= Not equal to


DAY 2:
Flooring a Number
You can floor a number or remove all decimal places using the int() function which converts a floating point number (with decimal places) into an integer (whole number).

int(3.738492) # Becomes 3

Rounding a Number
However, if you want to round a decimal number to the nearest whole number using the traditional mathematical way, where anything over .5 rounds up and anything below rounds down. Then you can use the python round() function.

round(3.738492) # Becomes 4

round(3.14159) # Becomes 3

round(3.14159, 2) # Becomes 3.14

Assignment Operators
Assignment operators such as the addition assignment operator += will add the number on the right to the original value of the variable on the left and assign the new value to the variable.

+=

-=

*=

/=

f-Strings
In Python, we can use f-strings to insert a variable or an expression into a string.

age = 12

print(f"I am {age} years old")

# Will output I am 12 years old.

DAY 3
You can put if/else statements inside other if/else statements. This is known as nesting. e.g.

if maths_score >= 90:
    if english_score >= 90:
        print("You're good at everything")
    else:
        print("You're good at maths")
if english_score >= 90:
    print("You're good at english)
In this case only when a student has over 90 on maths and english, do they get "You are good at everything".

Note: You can also have if statements that don't have a paired else statement.


to move a file to another directory:
mv my_document.txt documents/


Current Task: 27. Logical Operators. (Part of: DAY 3)
0:00/9:33


DAY 4: